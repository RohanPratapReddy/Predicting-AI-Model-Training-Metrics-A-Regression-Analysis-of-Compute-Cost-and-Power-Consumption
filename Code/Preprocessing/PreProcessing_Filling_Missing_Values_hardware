{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","gpuType":"V28","authorship_tag":"ABX9TyMvzOkHsyP4lkWpTJnl4ffT"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"TPU"},"cells":[{"cell_type":"markdown","source":["## **DATA 6250**\n","# **Machine Learning for Data Science**\n","## **Final Project**\n","## **Pre-Processing of Data**\n","## **Filling of Missing Values in Data**\n","### ***REFERENCE: EPOCH AI***\n","### ***Links to Dataset:***\n","- *Notable AI Models* : https://epoch.ai/data/notable_ai_models.csv\n","- *Large-Scale AI Models* : https://epoch.ai/data/large_scale_ai_models.csv\n","- *ML Hardware* : https://epoch.ai/data/ml_hardware.csv\n","\n","#### Done By: Rohan Pratap Reddy Ravula\n","#### School of Computing and Data Science\n","#### Wentworth Institute of Technology"],"metadata":{"id":"xOinNmXh00yl"}},{"cell_type":"markdown","source":["### Install required Libraries"],"metadata":{"id":"_NNomZNI1HOV"}},{"cell_type":"markdown","source":["### Mount Google Drive Folder"],"metadata":{"id":"EXnaMAzr1MZZ"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J3h1kfd0qVB-","executionInfo":{"status":"ok","timestamp":1744323914650,"user_tz":240,"elapsed":596,"user":{"displayName":"Rohan Pratap Reddy Ravula","userId":"17224012780318323221"}},"outputId":"e83ac847-64b6-43a8-b648-e7eac0dbc1b7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"markdown","source":["### Import Required Libraries"],"metadata":{"id":"Tn5sDpLp2Eg8"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import os"],"metadata":{"id":"Jdx1bh_42IyT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.experimental import enable_iterative_imputer\n","from sklearn.impute import IterativeImputer\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.ensemble import ExtraTreesRegressor"],"metadata":{"id":"HK2S5hVBvo96"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Load the csv file: ML hardware normailzed"],"metadata":{"id":"hMj6sKhh2_nh"}},{"cell_type":"code","source":["input_path = \"/content/drive/MyDrive/DATA 6250/Datasets/Updated/Normalized/ml_hardware_normalized.csv\"\n","df = pd.read_csv(input_path,)\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":550},"id":"zVFkZrAf3IM1","executionInfo":{"status":"ok","timestamp":1744323919091,"user_tz":240,"elapsed":33,"user":{"displayName":"Rohan Pratap Reddy Ravula","userId":"17224012780318323221"}},"outputId":"a3ae6fb1-08ca-4f57-a1c9-5836dfeee0ad"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        hardware model Manufacturer Type Release date  TDP (W)  \\\n","0      NVIDIA H200 SXM       NVIDIA  GPU   2024-11-18    700.0   \n","1      NVIDIA H200 SXM       NVIDIA  GPU   2024-11-18    700.0   \n","2  AMD Instinct MI325X          AMD  GPU   2024-10-10   1000.0   \n","3    NVIDIA GB200 NVL2       NVIDIA  GPU   2024-06-02   2400.0   \n","4       Google TPU v6e       Google  TPU   2024-05-14      NaN   \n","\n","                  ML models  Release price (USD)  FP64 (flops/s)  \\\n","0   SEA-LION V3 Llama3.1 8B                  NaN    3.345000e+13   \n","1  SEA-LION V3 Llama3.1 70B                  NaN    3.345000e+13   \n","2                       NaN                  NaN    8.170000e+13   \n","3                       NaN                  NaN    9.000000e+13   \n","4          Gemini 2.0 Flash                  NaN             NaN   \n","\n","   FP32 (flops/s)  FP16 (flops/s)  ...  Base clock (MHz)  Boost clock (MHz)  \\\n","0    6.691000e+13             NaN  ...               NaN                NaN   \n","1    6.691000e+13             NaN  ...               NaN                NaN   \n","2    1.634000e+14    1.300000e+15  ...            2100.0                NaN   \n","3    1.800000e+14    5.000000e+15  ...               NaN                NaN   \n","4             NaN             NaN  ...               NaN                NaN   \n","\n","   Memory clock (MHz)  Memory bus (bit)  Tensor cores  Process size (nm)  \\\n","0                 NaN               NaN           NaN                5.0   \n","1                 NaN               NaN           NaN                5.0   \n","2              1000.0               NaN           NaN                5.0   \n","3                 NaN               NaN           NaN                NaN   \n","4                 NaN               NaN           NaN                NaN   \n","\n","   Foundry  transistors (10^6)  \\\n","0     TSMC                 NaN   \n","1     TSMC                 NaN   \n","2     TSMC            153000.0   \n","3      NaN                 NaN   \n","4      NaN                 NaN   \n","\n","                                   Link to datasheet  Source for the price  \n","0  https://nvdam.widen.net/s/nb5zzzsjdf/hpc-datas...                   NaN  \n","1  https://nvdam.widen.net/s/nb5zzzsjdf/hpc-datas...                   NaN  \n","2  https://www.amd.com/en/products/accelerators/i...                   NaN  \n","3  https://www.nvidia.com/en-us/data-center/gb200...                   NaN  \n","4              https://cloud.google.com/tpu/docs/v6e                   NaN  \n","\n","[5 rows x 30 columns]"],"text/html":["\n","  <div id=\"df-f10c9ea6-6303-47d6-b003-a0eb37d12fef\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>hardware model</th>\n","      <th>Manufacturer</th>\n","      <th>Type</th>\n","      <th>Release date</th>\n","      <th>TDP (W)</th>\n","      <th>ML models</th>\n","      <th>Release price (USD)</th>\n","      <th>FP64 (flops/s)</th>\n","      <th>FP32 (flops/s)</th>\n","      <th>FP16 (flops/s)</th>\n","      <th>...</th>\n","      <th>Base clock (MHz)</th>\n","      <th>Boost clock (MHz)</th>\n","      <th>Memory clock (MHz)</th>\n","      <th>Memory bus (bit)</th>\n","      <th>Tensor cores</th>\n","      <th>Process size (nm)</th>\n","      <th>Foundry</th>\n","      <th>transistors (10^6)</th>\n","      <th>Link to datasheet</th>\n","      <th>Source for the price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>NVIDIA H200 SXM</td>\n","      <td>NVIDIA</td>\n","      <td>GPU</td>\n","      <td>2024-11-18</td>\n","      <td>700.0</td>\n","      <td>SEA-LION V3 Llama3.1 8B</td>\n","      <td>NaN</td>\n","      <td>3.345000e+13</td>\n","      <td>6.691000e+13</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>5.0</td>\n","      <td>TSMC</td>\n","      <td>NaN</td>\n","      <td>https://nvdam.widen.net/s/nb5zzzsjdf/hpc-datas...</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>NVIDIA H200 SXM</td>\n","      <td>NVIDIA</td>\n","      <td>GPU</td>\n","      <td>2024-11-18</td>\n","      <td>700.0</td>\n","      <td>SEA-LION V3 Llama3.1 70B</td>\n","      <td>NaN</td>\n","      <td>3.345000e+13</td>\n","      <td>6.691000e+13</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>5.0</td>\n","      <td>TSMC</td>\n","      <td>NaN</td>\n","      <td>https://nvdam.widen.net/s/nb5zzzsjdf/hpc-datas...</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>AMD Instinct MI325X</td>\n","      <td>AMD</td>\n","      <td>GPU</td>\n","      <td>2024-10-10</td>\n","      <td>1000.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>8.170000e+13</td>\n","      <td>1.634000e+14</td>\n","      <td>1.300000e+15</td>\n","      <td>...</td>\n","      <td>2100.0</td>\n","      <td>NaN</td>\n","      <td>1000.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>5.0</td>\n","      <td>TSMC</td>\n","      <td>153000.0</td>\n","      <td>https://www.amd.com/en/products/accelerators/i...</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>NVIDIA GB200 NVL2</td>\n","      <td>NVIDIA</td>\n","      <td>GPU</td>\n","      <td>2024-06-02</td>\n","      <td>2400.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>9.000000e+13</td>\n","      <td>1.800000e+14</td>\n","      <td>5.000000e+15</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>https://www.nvidia.com/en-us/data-center/gb200...</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Google TPU v6e</td>\n","      <td>Google</td>\n","      <td>TPU</td>\n","      <td>2024-05-14</td>\n","      <td>NaN</td>\n","      <td>Gemini 2.0 Flash</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>https://cloud.google.com/tpu/docs/v6e</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 30 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f10c9ea6-6303-47d6-b003-a0eb37d12fef')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f10c9ea6-6303-47d6-b003-a0eb37d12fef button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f10c9ea6-6303-47d6-b003-a0eb37d12fef');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9dd95867-3e04-4b9d-a89b-1cb1cb67ff22\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9dd95867-3e04-4b9d-a89b-1cb1cb67ff22')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9dd95867-3e04-4b9d-a89b-1cb1cb67ff22 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":65}]},{"cell_type":"code","source":["for col in df.columns:\n","  print(\"Columns:\",col,\"Column Type: \",df[col].dtype)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Le8taM3ymW3A","executionInfo":{"status":"ok","timestamp":1744323921153,"user_tz":240,"elapsed":25,"user":{"displayName":"Rohan Pratap Reddy Ravula","userId":"17224012780318323221"}},"outputId":"7fa92183-6464-4ce1-a9a1-cdb0b43617a9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Columns: hardware model Column Type:  object\n","Columns: Manufacturer Column Type:  object\n","Columns: Type Column Type:  object\n","Columns: Release date Column Type:  object\n","Columns: TDP (W) Column Type:  float64\n","Columns: ML models Column Type:  object\n","Columns: Release price (USD) Column Type:  float64\n","Columns: FP64 (flops/s) Column Type:  float64\n","Columns: FP32 (flops/s) Column Type:  float64\n","Columns: FP16 (flops/s) Column Type:  float64\n","Columns: TF32 (flops/s) Column Type:  float64\n","Columns: Tensor-FP16 (flops/s) Column Type:  float64\n","Columns: INT16 (ops/s) Column Type:  float64\n","Columns: INT8 (ops/s) Column Type:  float64\n","Columns: INT4 (ops/s) Column Type:  float64\n","Columns: Memory size (bytes) Column Type:  float64\n","Columns: Memory bandwidth (byte/s) Column Type:  float64\n","Columns: Intranode bandwidth (byte/s) Column Type:  float64\n","Columns: Internode bandwidth (bit/s) Column Type:  float64\n","Columns: Die Size (mm^2) Column Type:  float64\n","Columns: Base clock (MHz) Column Type:  float64\n","Columns: Boost clock (MHz) Column Type:  float64\n","Columns: Memory clock (MHz) Column Type:  float64\n","Columns: Memory bus (bit) Column Type:  float64\n","Columns: Tensor cores Column Type:  float64\n","Columns: Process size (nm) Column Type:  float64\n","Columns: Foundry Column Type:  object\n","Columns: transistors (10^6) Column Type:  float64\n","Columns: Link to datasheet Column Type:  object\n","Columns: Source for the price Column Type:  object\n"]}]},{"cell_type":"markdown","source":["## Finding k value (proportionality constant)"],"metadata":{"id":"oKT1SxryAOyx"}},{"cell_type":"code","source":["mask_process_size = df['Process size (nm)'].isna()\n","rms_process_size = np.sqrt((df[~mask_process_size]['Process size (nm)'] ** 2).mean())\n","print(\"RMS of Process size (nm):\",rms_process_size)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bKcrht_amoBD","executionInfo":{"status":"ok","timestamp":1744323922996,"user_tz":240,"elapsed":7,"user":{"displayName":"Rohan Pratap Reddy Ravula","userId":"17224012780318323221"}},"outputId":"82bb3c2d-bde4-4261-bf8c-70f6358205b2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMS of Process size (nm): 12.629774108425327\n"]}]},{"cell_type":"code","source":["avg_freq = (df['Base clock (MHz)'] + df['Boost clock (MHz)']) / 2\n","mask_avg_freq = avg_freq.isna()\n","rms_avg_freq = np.sqrt((avg_freq[~mask_avg_freq] ** 2).mean())\n","print(\"RMS of Average Frequency:\",rms_avg_freq)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZcJdwOsBn2Xu","executionInfo":{"status":"ok","timestamp":1744323924236,"user_tz":240,"elapsed":3,"user":{"displayName":"Rohan Pratap Reddy Ravula","userId":"17224012780318323221"}},"outputId":"cba52996-4bdb-4981-8346-f4e7cc65c79a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMS of Average Frequency: 1430.533776607643\n"]}]},{"cell_type":"code","source":["mask_transistor = df['transistors (10^6)'].isna()\n","rms_transistor = np.sqrt((df[~mask_transistor]['transistors (10^6)'] ** 2).mean())\n","print(\"RMS of Transistors:\",rms_transistor)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qAU0iX36ot2B","executionInfo":{"status":"ok","timestamp":1744323925922,"user_tz":240,"elapsed":8,"user":{"displayName":"Rohan Pratap Reddy Ravula","userId":"17224012780318323221"}},"outputId":"f9311e74-eb43-4355-80b5-1144392109f9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMS of Transistors: 177181231665.47235\n"]}]},{"cell_type":"code","source":["mask_power = df['TDP (W)'].isna()\n","rms_power = np.sqrt((df[~mask_power]['TDP (W)'] ** 2).mean())\n","print(\"RMS of TDP (W):\",rms_power)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cFpOwLEDpAOx","executionInfo":{"status":"ok","timestamp":1744323927078,"user_tz":240,"elapsed":3,"user":{"displayName":"Rohan Pratap Reddy Ravula","userId":"17224012780318323221"}},"outputId":"bca19e3e-4bd5-48e1-d069-cfec0da77f77"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMS of TDP (W): 404.16402781865474\n"]}]},{"cell_type":"code","source":["k = (rms_power * rms_process_size) / (rms_transistor * rms_avg_freq)\n","k = k / (10 ** 21)\n","print(k)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qHTS9AOupH8e","executionInfo":{"status":"ok","timestamp":1744323928163,"user_tz":240,"elapsed":3,"user":{"displayName":"Rohan Pratap Reddy Ravula","userId":"17224012780318323221"}},"outputId":"fe6cab1e-710c-475c-a8f1-13e6b09e1a83"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2.013897705850282e-32\n"]}]},{"cell_type":"markdown","source":["## Creating a new average frequency column"],"metadata":{"id":"KI7sMmuCAZJq"}},{"cell_type":"code","source":["avg_freq = (df['Base clock (MHz)'] + df['Boost clock (MHz)']) / 2\n","df_new = (df[['hardware model','Process size (nm)','transistors (10^6)', 'TDP (W)']])\n","df_new = pd.concat([df_new,avg_freq],axis=1)\n","df_new = df_new.rename(columns={0:'Average Frequency'})"],"metadata":{"id":"AELbQSOtqnwv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cols_to_impute = ['Process size (nm)',\n","                  'transistors (10^6)',\n","                  'Average Frequency',\n","                  'TDP (W)',]\n","df_numeric = df_new[cols_to_impute]"],"metadata":{"id":"JI2gyIZ4v14b"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Imputing using random forest regressor"],"metadata":{"id":"i5_I5eiOAftq"}},{"cell_type":"code","source":["rf_regressor = RandomForestRegressor(\n","    n_estimators=100,\n","    random_state=0,\n","    n_jobs=-1  # Use all available cores for faster processing\n",")"],"metadata":{"id":"AouoqcNfwE2L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["imputer = IterativeImputer(\n","    estimator=rf_regressor,\n","    max_iter=10,               # Number of imputation rounds\n","    initial_strategy='mean',   # How to initialize missing values\n","    imputation_order='ascending',  # Order in which to impute columns (optional)\n","    random_state=0\n",")"],"metadata":{"id":"o8J8HOk6wNpm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_imputed_array = imputer.fit_transform(df_numeric)"],"metadata":{"id":"Uwr5XbtYwIEC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_imputed = pd.DataFrame(df_imputed_array, columns=cols_to_impute)"],"metadata":{"id":"5YRECpKKwXDp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_final = pd.concat(\n","    [df_new[['hardware model']].reset_index(drop=True),\n","     df_imputed.reset_index(drop=True)],\n","    axis=1\n",")"],"metadata":{"id":"yFypFAUNwaCC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"After imputation:\")\n","print(df_final.head())\n","print(df_final.info())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MNVa78Zvwe0P","executionInfo":{"status":"ok","timestamp":1744323946003,"user_tz":240,"elapsed":7,"user":{"displayName":"Rohan Pratap Reddy Ravula","userId":"17224012780318323221"}},"outputId":"667c50d0-c146-4e48-9d0b-aac4b1fc0e68"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["After imputation:\n","        hardware model  Process size (nm)  transistors (10^6)  \\\n","0      NVIDIA H200 SXM               5.00        7.888669e+04   \n","1      NVIDIA H200 SXM               5.00        7.888669e+04   \n","2  AMD Instinct MI325X               5.00        1.530000e+05   \n","3    NVIDIA GB200 NVL2               5.00        1.270667e+05   \n","4       Google TPU v6e              13.07        2.470000e+12   \n","\n","   Average Frequency  TDP (W)  \n","0        1803.256018    700.0  \n","1        1803.256018    700.0  \n","2        1803.256018   1000.0  \n","3        1803.256018   2400.0  \n","4        1252.348622    156.9  \n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 879 entries, 0 to 878\n","Data columns (total 5 columns):\n"," #   Column              Non-Null Count  Dtype  \n","---  ------              --------------  -----  \n"," 0   hardware model      879 non-null    object \n"," 1   Process size (nm)   879 non-null    float64\n"," 2   transistors (10^6)  879 non-null    float64\n"," 3   Average Frequency   879 non-null    float64\n"," 4   TDP (W)             879 non-null    float64\n","dtypes: float64(4), object(1)\n","memory usage: 34.5+ KB\n","None\n"]}]},{"cell_type":"code","source":["df_final\n","del df_new"],"metadata":{"id":"QEQQ9rbbwru2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df['TDP (W)'] = df_final['TDP (W)']"],"metadata":{"id":"cpHhVA1m0Xf_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Creating a new compute ops, flops column"],"metadata":{"id":"n5l-zWiYAm3u"}},{"cell_type":"code","source":["df_new = df.copy()\n","cols_performance = [\n","    'FP64 (flops/s)', 'FP32 (flops/s)', 'FP16 (flops/s)',\n","    'TF32 (flops/s)', 'Tensor-FP16 (flops/s)',\n","    'INT16 (ops/s)', 'INT8 (ops/s)', 'INT4 (ops/s)'\n","]\n","df_new.loc[:, cols_performance] = df_new.loc[:, cols_performance].fillna(0)\n","df_new.loc[:, 'compute flops'] = (\n","    df_new['FP64 (flops/s)'] +\n","    df_new['FP32 (flops/s)'] +\n","    df_new['FP16 (flops/s)'] +\n","    df_new['TF32 (flops/s)'] +\n","    df_new['Tensor-FP16 (flops/s)']\n",")\n","df_new.loc[:, 'compute ops'] = (\n","    df_new['INT16 (ops/s)'] +\n","    df_new['INT8 (ops/s)'] +\n","    df_new['INT4 (ops/s)']\n",")\n","df_new.loc[:,'Base clock (MHz)'] = df_new.loc[:,'Base clock (MHz)'].fillna(0)\n","df_new.loc[:,'Boost clock (MHz)'] = df_new.loc[:,'Boost clock (MHz)'].fillna(0)\n","df_new.loc[:,'avg_freq'] = (df_new['Base clock (MHz)'] + df_new['Boost clock (MHz)']) / 2\n","df_new.loc[:,'freq_range'] = (df_new['Boost clock (MHz)'] - df_new['Base clock (MHz)'])\n","df_new.loc[df_new['freq_range'] < 0, 'freq_range'] = 0"],"metadata":{"id":"Yf9vFaAO-sV7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cols_to_impute = ['compute flops', 'compute ops', 'avg_freq', 'freq_range']\n","for col in cols_to_impute:\n","    df_new.loc[df_new[col] == 0, col] = np.nan"],"metadata":{"id":"it0aCejMomwh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["num_cols = df_new.select_dtypes(include='number').columns\n","for col in num_cols:\n","    print(col)\n","num_cols.drop('Release price (USD)')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vdTNxRWEqQm7","executionInfo":{"status":"ok","timestamp":1744323955632,"user_tz":240,"elapsed":4,"user":{"displayName":"Rohan Pratap Reddy Ravula","userId":"17224012780318323221"}},"outputId":"fa31ec4c-f6e8-4e01-c3ff-03724b7f45cf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["TDP (W)\n","Release price (USD)\n","FP64 (flops/s)\n","FP32 (flops/s)\n","FP16 (flops/s)\n","TF32 (flops/s)\n","Tensor-FP16 (flops/s)\n","INT16 (ops/s)\n","INT8 (ops/s)\n","INT4 (ops/s)\n","Memory size (bytes)\n","Memory bandwidth (byte/s)\n","Intranode bandwidth (byte/s)\n","Internode bandwidth (bit/s)\n","Die Size (mm^2)\n","Base clock (MHz)\n","Boost clock (MHz)\n","Memory clock (MHz)\n","Memory bus (bit)\n","Tensor cores\n","Process size (nm)\n","transistors (10^6)\n","compute flops\n","compute ops\n","avg_freq\n","freq_range\n"]},{"output_type":"execute_result","data":{"text/plain":["Index(['TDP (W)', 'FP64 (flops/s)', 'FP32 (flops/s)', 'FP16 (flops/s)',\n","       'TF32 (flops/s)', 'Tensor-FP16 (flops/s)', 'INT16 (ops/s)',\n","       'INT8 (ops/s)', 'INT4 (ops/s)', 'Memory size (bytes)',\n","       'Memory bandwidth (byte/s)', 'Intranode bandwidth (byte/s)',\n","       'Internode bandwidth (bit/s)', 'Die Size (mm^2)', 'Base clock (MHz)',\n","       'Boost clock (MHz)', 'Memory clock (MHz)', 'Memory bus (bit)',\n","       'Tensor cores', 'Process size (nm)', 'transistors (10^6)',\n","       'compute flops', 'compute ops', 'avg_freq', 'freq_range'],\n","      dtype='object')"]},"metadata":{},"execution_count":84}]},{"cell_type":"markdown","source":["## Imputing missing values in column using ExtraTreesRegressor"],"metadata":{"id":"CcZM6CTGAyKe"}},{"cell_type":"code","source":["predict_cols = [col for col in num_cols if col not in cols_to_impute]\n","for col in cols_to_impute:\n","  missing_mask = df_new[col].isna()\n","  if missing_mask.sum() == 0:\n","    continue\n","  train_data = df_new[~missing_mask]\n","  x_train = train_data[predict_cols]\n","  y_train = train_data[col]\n","  model = ExtraTreesRegressor(n_estimators=100, random_state=42)\n","  model.fit(x_train, y_train)\n","  x_missing = df_new.loc[missing_mask, predict_cols]\n","  x_missing = x_missing.fillna(x_train.median())\n","  predicted = model.predict(x_missing)\n","  df_new.loc[missing_mask, col] = predicted"],"metadata":{"id":"j2kfIamirbNu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cols_to_store = ['hardware model', 'Manufacturer', 'Type', 'Release date',\n","                 'Release price (USD)', 'TDP (W)', 'compute flops', 'compute ops',\n","                 'Memory size (bytes)', 'Die Size (mm^2)', 'avg_freq', 'freq_range',\n","                 'Tensor cores', 'transistors (10^6)', 'Process size (nm)','Foundry']\n","df_new = df_new[cols_to_store]"],"metadata":{"id":"tz-vKrYxpzIS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["target_col = 'Release price (USD)'\n","predictor_cols = [col for col in df_new.columns if col not in [target_col, 'hardware model']]\n","num_cols = df_new[predictor_cols].select_dtypes(include='number').columns\n","df_new[num_cols] = df_new[num_cols].fillna(np.sqrt((df_new[num_cols] ** 2).mean()))\n","\n","cat_cols = df_new[predictor_cols].select_dtypes(include='object').columns\n","df_new[cat_cols] = df_new[cat_cols].fillna('missing vals')\n","\n","X = pd.get_dummies(df_new[predictor_cols],drop_first=True)\n","y = df_new[target_col]\n","\n","X_train = X[y.notnull()]\n","y_train = y[y.notnull()]\n","x_missing = X[y.isnull()]\n","\n","model = ExtraTreesRegressor(n_estimators=100, random_state=42)\n","model.fit(X_train, y_train)\n","\n","predicted_prices = model.predict(x_missing)\n","\n","df_new.loc[y.isnull(), target_col] = predicted_prices"],"metadata":{"id":"cUZDRmNyuc5i"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_new.loc[:,'ml models'] = df['ML models'].copy()\n","df_new['ml models'] = df_new['ml models'].fillna('missing vals')"],"metadata":{"id":"Qu1ZMlTQu87I"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["output_path_large_models = \"/content/drive/MyDrive/DATA 6250/Datasets/Updated/Filled/ml_hardware_filled.csv\"\n","if os.path.exists(output_path_large_models):\n","    os.remove(output_path_large_models)\n","path = os.path.dirname(output_path_large_models)\n","if not os.path.exists(path):\n","    os.makedirs(path)\n","df_new.to_csv(output_path_large_models, index=False)"],"metadata":{"id":"0Nj4lZ3px5nL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"zZX0e1mEzED7"},"execution_count":null,"outputs":[]}]}